{
  "name": "AutoSpotting",
  "tagline": "Simple tool for automatically replacing EC2 instances in AWS AutoScaling groups with compatible instances requested on the EC2 spot market",
  "body": "# AutoSpotting #\r\n\r\nA simple tool designed to significantly lower your Amazon AWS costs by\r\nautomating the use of the [spot market](https://aws.amazon.com/ec2/spot). It can\r\noften achieve savings in the range of 80-90% off the usual on-demand prices.\r\n\r\n![Savings Graph](https://cdn.cloudprowess.com/images/autospotting-savings.png)\r\n\r\nWhen enabled on your existing on-demand AutoScaling group, it starts launching\r\nEC2 spot instances that are cheaper, at least as powerful and configured as\r\nclosely as possible as your existing on-demand instances.\r\n\r\nIt then gradually swaps them with your existing on-demand instances, which can\r\nthen be terminated.\r\n\r\n# Features\r\n\r\n* Easy to install and set up on existing environments, you can literally get \r\n started within 5 minutes. See the installation steps below for more details\r\n* Free and open source, you only pay for runtime resource consumption, \r\n  typically a few cents per month.\r\n  * backed by Lambda, with typical execution time well within the Lambda\r\n  free tier\r\n  * small bandwidth costs, for performing API calls against all regional API\r\n  endpoints of the EC2 and AutoScaling services.\r\n* Designed for use against AutoScaling groups with relatively long-running\r\n  instances, where it's acceptable to run costlier on-demand instances from\r\n  time to time. For short-term batch processing you should have a look into\r\n  the [spot blocks](https://aws.amazon.com/blogs/aws/new-ec2-spot-blocks-for-defined-duration-workloads/)\r\n  instead.\r\n* Supports higher level AWS services internally backed by AutoScaling, such as \r\n  ECS or Elastic Beanstalk, with minimal configuration changes.\r\n* Optimizes for high availability over lowest costs whenever possible, but it\r\n  still often achieves significant cost savings.\r\n* Minimalist implementation (currently about 1000 CLOC of Golang code), \r\n  leveraging and relying on battle-tested AWS services - mainly AutoScaling -\r\n  for most mission-critical things:\r\n  * instance health checks\r\n  * replacement of terminated instances\r\n  * integration with, ELB, ALB, CloudWatch\r\n  * horizontal scaling\r\n* Should be compatible out of the box with most AWS services that integrate\r\n  with your AutoScaling groups, such as ELB, ALB, CodeDeploy, CloudWatch, etc.\r\n  as long as they support instances attached later to existing groups. This may be \r\n  problematic for some of them but in general it works.\r\n* Can automatically replace any instance types with any instance types available\r\n  on the spot market:\r\n  * as long as they are cheaper and at least as big as the original instances\r\n  * it doesn't matter if the original instance is available on the spot market:\r\n  for example it is often replacing t2.medium with better m4.large instances,\r\n  as long as they happen to be cheaper.\r\n* Self-contained, has no runtime dependencies on external infrastructure except\r\n  for the regional EC2 and AutoScaling API endpoints\r\n  * it's not a SaaS, it fully runs within your AWS account\r\n  * it doesn't gather/persist/export any information about the resources running\r\n  in your AWS account\r\n  \r\n \r\n## Getting Started ##\r\n\r\n### Requirements ###\r\n\r\n* You will need credentials to an AWS account able to start CloudFormation stacks.\r\n* Some of the following steps assume you have the AWS cli tool installed, but the setup\r\n  can also be done manually using the AWS console or using other tools able to\r\n  launch CloudFormation stacks and set tags on AutoScaling groups.\r\n\r\n### Installation ###\r\n\r\nFirst you need to launch a CloudFormation stack in your account. Clicking the\r\nbutton below and following the launch wizard to completion is all you need to\r\nget it installed, you can safely use the default stack parameters.\r\n\r\n[![Launch Stack](https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png)](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=AutoSpotting&templateURL=https://s3.amazonaws.com/cloudprowess/dv/template.json)\r\n\r\nIf you are using the AWS command-line tool, you can use this command instead:\r\n\r\n    aws cloudformation create-stack \\\r\n    --stack-name AutoSpotting \\\r\n    --template-url https://s3.amazonaws.com/cloudprowess/dv/template.json \\\r\n    --capabilities CAPABILITY_IAM\r\n\r\nNotes:\r\n\r\n* For technical reasons the stack needs to be launched in the US-East-1(Virginia)\r\n  region, so make sure it's not created in another region.\r\n* The AutoScaling groups it runs against can be in any region, since all regions\r\n  are processed at runtime.\r\n\r\n### Configuration for an AutoScaling group ###\r\n\r\nEnabling it on an AutoScaling group is a matter of setting a tag on the group:\r\n\r\n    Key: spot-enabled\r\n    Value: true\r\n\r\nThis can be configured with the AWS console from [this view](https://console.aws.amazon.com/ec2/autoscaling/home?region=us-east-1#AutoScalingGroups:view=details), (the region may differ).\r\n\r\nAs mentioned before, your environments may be in any AWS region.\r\n\r\nIf you use the AWS command-line tools, the same can be achieved using this\r\ncommand:\r\n\r\n    aws --region us-east-1 autoscaling create-or-update-tags --tags ResourceId=my-auto-scaling-group,ResourceType=auto-scaling-group,Key=spot-enabled,Value=true,PropagateAtLaunch=false\r\n\r\nThis needs to be done for every single AutoScaling group where you want it\r\nenabled, otherwise the group is ignored. If you have lots of groups you may\r\nwant to script it in some way.\r\n\r\n### Updates and Downgrades ###\r\n\r\nThe software doesn't auto-update anymore(it used to in the first few versions),\r\nso you will need to manually perform updates using CloudFormation, based on the\r\nTravis CI build number of the version you would like to use going forward.\r\n\r\nThis method can be used both for upgrades and downgrades, so assuming you would\r\nlike to switch to the build with the number 45, you will need to perform a\r\nCloudFormation stack update in which you change the \"LambdaZipPath\" stack\r\nparameter to a value that looks like `dv/lambda_build_45.zip`.\r\n\r\nGit commit SHAs(truncated to 7 characters) are also accepted instead of the\r\nbuild numbers, so for example `dv/lambda_build_f7f395d.zip` should also be a\r\nvalid parameter, as long as that build is available in the author's\r\n[S3 bucket](http://s3.amazonaws.com/cloudprowess).\r\n\r\nThe full list of builds and their respective git commits can be seen on the\r\nTravis CI [builds page](https://travis-ci.org/cristim/autospotting/builds)\r\n\r\n### Uninstallation ###\r\n\r\nIf at some point you want to uninstall it, you just need to delete the\r\nCloudFormation stack.\r\n\r\nThe AutoScaling groups where it used to be enabled will\r\nkeep running until their spot instances eventually get outbid and terminated,\r\nthen replaced by AutoScaling with on-demand ones. This is eventually bringing\r\nthe group to the initial state. If you want, you can speed up the process by\r\ngradually terminating the spot instances yourself.\r\n\r\nThe tags set on the group can be deleted at any time you want it to be\r\ndisabled for that group.\r\n\r\n# How it works\r\n\r\nOnce enabled on an AutoScaling group, it is gradually replacing all the\r\non-demand instances belonging to the group with compatible and similarly\r\nconfigured but cheaper spot instances.\r\n\r\nThe replacements are done using the relatively new Attach/Detach actions supported\r\nby the AutoScaling API. A new compatible spot instance is launched, and after a\r\nwhile, at least as much as the group's grace period, it will be attached to the\r\ngroup, while at the same time an on-demand instance is detached from the group\r\nand terminated in order to keep the group at constant capacity.\r\n\r\nWhen assessing the compatibility, it takes into account the hardware specs, such\r\nas CPU cores, RAM size, attached instance store volumes and their type and size,\r\nas well as the supported virtualization types (HVM or PV) of both instance types.\r\nThe new spot instance is usually a few times cheaper than the original instance,\r\nwhile also often providing more computing capacity.\r\n\r\nThe new spot instance is configured with the same roles, security groups and tags\r\nand set to execute the same user data script as the original instance, so from a\r\nfunctionality perspective it should be indistinguishable from other instances in\r\nthe group, although its hardware specs may be slightly different(again: at least\r\nthe same, but often can be of bigger capacity).\r\n\r\nWhen replacing multiple instances in a group, the algorithm tries to use a wide\r\nvariety of instance types, in order to reduce the probability of simultaneous\r\nfailures that may impact the availability of the entire group. It always tries\r\nto launch the cheapest available compatible instance type, but if the group\r\nalready has a considerable amount of instances of that type in the same\r\navailability zone (currently more than 20% of the group's capacity is in that\r\nzone and of that instance type), it picks the second cheapest compatible\r\ninstance, and so on.\r\n\r\nDuring multiple replacements performed on a given group, it only swaps them one\r\nat a time per Lambda function invocation, in order to not change the group too\r\nfast, but instances belonging to multiple groups can be replaced concurrently.\r\nIf you find this slow, the Lambda function invocation frequency (defaulting to\r\nonce every 5 minutes) can be changed by updating the CloudFormation stack, which\r\nhas a parameter for it.\r\n\r\nIn the (so far unlikely) case in which the market price is high enough that \r\nthere are no spot instances that can be launched, (and also in case of software\r\ncrashes which may still rarely happen), the group would not be changed and it\r\nwould keep running as it is, but AutoSpotting will continuously attempt to\r\nreplace them, until eventually the prices decrease again and replaecments may\r\nsucceed again.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}