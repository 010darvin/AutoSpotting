{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AutoSpotting: automated EC2 Spot market bidder integrated with AutoScaling",
  "Parameters": {
    "ExecutionFrequency": {
      "Default": "rate(5 minutes)",
      "Description": "Frequency of executing the Lambda function, trade-off between speed and stability. Can accept any value documented at http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html",
      "Type": "String"
    },
    "LambdaHandlerFunction": {
      "Default": "wrapper.lambda_handler",
      "Description": "Handler function for Lambda",
      "Type": "String"
    },
    "LambdaS3Bucket": {
      "Default": "cloudprowess",
      "Description": "S3 bucket that contains the function",
      "Type": "String"
    },
    "LambdaZipPath": {
      "Default": "dv/lambda.zip",
      "Description": "Path to the Lambda function zip file inside the S3 bucket. Can be used to update to a more recent version, using the first 8 characters of a commit SHA, such as 'dv/lambda_d34db33f.zip'",
      "Type": "String"
    },
    "LogRetentionPeriod": {
      "Default": "7",
      "Description": "Number of days to keep the Lambda function logs in CloudWatch.",
      "Type": "Number"
    }
  },
  "Resources": {
    "LambdaExecutionRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Path": "/lambda/"
      },
      "Type": "AWS::IAM::Role"
    },
    "LambdaFunction": {
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "LambdaS3Bucket"
          },
          "S3Key": {
            "Ref": "LambdaZipPath"
          }
        },
        "Description": "Implements SPOT instance automation",
        "Handler": {
          "Ref": "LambdaHandlerFunction"
        },
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      },
      "Type": "AWS::Lambda::Function"
    },
    "LambdaPolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeLaunchConfigurations",
                "autoscaling:AttachInstances",
                "autoscaling:DetachInstances",
                "ec2:CreateTags",
                "ec2:DescribeInstances",
                "ec2:DescribeRegions",
                "ec2:DescribeSpotInstanceRequests",
                "ec2:DescribeSpotPriceHistory",
                "ec2:RequestSpotInstances",
                "ec2:TerminateInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ]
        },
        "PolicyName": "LambdaPolicy",
        "Roles": [
          {
            "Ref": "LambdaExecutionRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "LogGroup": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "LambdaFunction"
              }
            ]
          ]
        },
        "RetentionInDays": {
          "Ref": "LogRetentionPeriod"
        }
      },
      "Type": "AWS::Logs::LogGroup"
    },
    "PermissionForEventsToInvokeLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ScheduledRule",
            "Arn"
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "ScheduledRule": {
      "Properties": {
        "Description": "ScheduledRule for launching the AutoSpotting Lambda function",
        "ScheduleExpression": {
          "Ref": "ExecutionFrequency"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "AutoSpottingEventGenerator"
          }
        ]
      },
      "Type": "AWS::Events::Rule"
    }
  }
}